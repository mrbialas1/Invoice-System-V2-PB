buildscript {
    ext {
        lombokVersion = '1.18.26'
        spockVersion = '2.0-groovy-2.5'
        springBootVersion = '2.4.2'
        springDependencyManagementVersion = '1.0.11.RELEASE'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'java'
    id 'groovy'
    id 'checkstyle'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compileOnly("org.projectlombok:lombok:${lombokVersion}")

    implementation "org.springframework.boot:spring-boot-starter-web"

    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"

    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.80
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.80
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'pl/futurecollars/invoicing/InvoiceApplication.class')
        }))
    }
}

test {
    finalizedBy jacocoTestReport
}

check {
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
}

group = 'pl.project'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}